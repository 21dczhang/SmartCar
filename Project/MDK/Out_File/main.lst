C251 COMPILER V5.60.0,  main                                                               01/07/24  18:51:58  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out_File\main.obj
COMPILER INVOKED BY: G:\Keil_v5\C251\C251\BIN\C251.EXE ..\USER\src\main.c XSMALL INTR2 WARNINGLEVEL(3) OPTIMIZE(0,SPEED)
                    - BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;
                    -..\USER\inc;..\USER\src;..\CODE) DEBUG PRINT(.\Out_File\main.lst) OBJECT(.\Out_File\main.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file                main
   11           * @company                     成都逐飞科技有限公司
   12           * @author              逐飞科技(QQ790875685)
   13           * @version             查看doc内version文件 版本说明
   14           * @Software                    MDK FOR C251 V5.60
   15           * @Target core         STC32G12K128
   16           * @Taobao                      https://seekfree.taobao.com/
   17           * @date                2020-12-18
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "headfile.h"
   21          float a = 0.1;
   22          /*
   23           * 系统频率，可查看board.h中的 FOSC 宏定义修改。
   24           * board.h文件中FOSC的值设置为0,则程序自动设置系统频率为33.1776MHZ
   25           * 在board_init中,已经将P54引脚设置为复位
   26           * 如果需要使用P54引脚,可以在board.c文件中的board_init()函数中删除SET_P54_RESRT即可
   27           */
   28          
   29          
   30          
   31          void BUZZ_Init(void)
   32          {
   33   1          gpio_mode(P6_7, GPO_PP);
   34   1          BUZZPin = 0;                // 先关闭蜂鸣器
   35   1      }
   36          
   37          
   38          
   39          
   40          unsigned char FlagEnter = 0, FlagCancel = 0, FlagUp = 0, FlagDown = 0;
   41          unsigned char LastFlagEnter = 0, LastFlagCancel = 0, LastFlagUp = 0, LastFlagDown = 0;
   42          void KeySystem(void);
   43          GUIS guis[5][8];
   44          unsigned char guiNumber[5] = {5, 8, 6, 7, 4};
   45          unsigned char guiSelect = 0, guiScene = 0, guiEdit = 0;
   46          unsigned char guiTop = 0;
   47          void Gui_TEST_Init(void);
   48          
   49          
   50          void All_Init(void)
   51          {
   52   1          DisableGlobalIRQ();                                                                                 // 关闭总中断
   53   1          board_init();                                                                                                               // 初始化寄存器,勿删除此句代码。
   54   1          Encoder_Init();                                                                                                     // 编码器初始化
   55   1          Motor_Init();                                                                                                               // 电机初始化
C251 COMPILER V5.60.0,  main                                                               01/07/24  18:51:58  PAGE 2   

   56   1          init_Steer_PWM();                                                                                           // 舵机初始化
   57   1          BUZZ_Init();                                                                                                                // 蜂鸣器高电平点亮
   58   1          Analog_Digital_Converter_Init();                            // ADC初始化
   59   1          //Tof_Init();                                                                                                                       // 测距模块初始化
   60   1          //  imu660ra_init();                                                                                                // 姿态传感器初始化
   61   1          oled_init();                                                                                                                // 初始化oled屏幕
   62   1          pit_timer_ms(TIM_1, 5);                                                             // 使用定时器做周期中断，时间5ms一次
   63   1          wireless_uart_init();                                                                               // 无线串口初始化: UART4_TX_P03   UART4_RX_P02  115200  TIM2
   64   1          //////////////////////////////////////////////////////////////////
   65   1          Flag_Init();                                                                                                                // Fuse标志位初始化（置0）
   66   1          PID_Parameter_Init(&TurnPID);                                               // 转向PID结构体初始化
   67   1          PID_Parameter_Init(&SpeedPID);                                      // 速度PID结构体初始化
   68   1          EnableGlobalIRQ();                                                                                  // 开启总中断
   69   1          wireless_uart_send_buff("Init OK!\n", 9); // 无线串口发送初始化完成信息
   70   1              //Tof_Init();
   71   1              Gui_TEST_Init();
   72   1              slInit();
*** WARNING C140 IN LINE 72 OF ..\USER\src\main.c: 'slInit' undefined; assuming 'extern int slInit()'
   73   1      }
   74          
   75          void main()
   76          {
   77   1          //char txt[20];                                                                                     // sprintf容器
   78   1          //char mess[30];                                                                            // wireless容器
   79   1          /*----测试函数(内部本身有死循环)----*/
   80   1          //  Test_Motor(1);                  // 1:正转  0:反转
   81   1          // 速度参数
   82   1          ClsLoop_Set_Speed  = 2500;                                          // 闭环速度（避障之后）
   83   1          ClsLoop_Speed = ClsLoop_Set_Speed;
   84   1          OpenLoop_Set_Speed = 2500;                                          // 开环速度（避障之前）
   85   1          OpenLoop_Speed = OpenLoop_Set_Speed;
   86   1          // 转向环参数
   87   1          Turn_Suquence = 0;                                                                          // 转向PID下标
   88   1              vtest = 10;
   89   1          // 发车方向（0：左入左出  1：右入右出）
   90   1          Default_Dir = 0;                                                                                    // 发车、入库、避障方向一致
   91   1      
   92   1          All_Init();                                                                                         // 全体硬件初始化
   93   1              /*while(1){
   94   1                      KeySystem();
   95   1                      delay_ms(500);
   96   1              }*/
   97   1          while (1) {
   98   2                      KeySystem();
   99   2                      Flag.start_go = go_flag;
  100   2              /**********显示5个电感值************/
  101   2      //        if(!showing){
  102   2      //                      sprintf(txt, "Mid_Adc= %05d", adc_date[6]);
  103   2      //                      oled_p6x8str(1, 1, txt);   // 显示
  104   2      //                      sprintf(txt, "Left_Adc= %05d", adc_date[0]);
  105   2      //                      oled_p6x8str(1, 4, txt);   // 显示
  106   2      //                      sprintf(txt, "Right_Adc= %05d", adc_date[1]);
  107   2      //                      oled_p6x8str(1, 5, txt);   // 显示
  108   2      //                      sprintf(txt, "Left_Xie= %05d", adc_date[2]);
  109   2      //                      oled_p6x8str(1, 6, txt);   // 显示
  110   2      //                      sprintf(txt, "Right_Xie= %05d", adc_date[3]);
  111   2      //                      oled_p6x8str(1, 7, txt);         // 显示
  112   2      //                      sprintf(txt, "Left_Corner= %05d", adc_date[4]);
  113   2      //                      oled_p6x8str(1, 2, txt);   // 显示
  114   2      //                      sprintf(txt, "Right_Corner= %05d", adc_date[5]);
  115   2      //                      oled_p6x8str(1, 3, txt);   // 显示
  116   2      //              }else{
  117   2      //                      sprintf(txt, "adc_deviation = %05d", adc_deviation);
  118   2      //                      oled_p6x8str(1, 1, txt);   // 显示
  119   2      //                      sprintf(txt, "Speed_PWM = %05d", Speed_PWM);
  120   2      //                      oled_p6x8str(1, 2, txt);   // 显示
C251 COMPILER V5.60.0,  main                                                               01/07/24  18:51:58  PAGE 3   

  121   2      //                      sprintf(txt, "Turn_PWM = %05d", Turn_PWM);
  122   2      //                      oled_p6x8str(1, 3, txt);   // 显示
  123   2      //                      sprintf(txt, "LEFT_PWM = %05d", All_PWM_left);
  124   2      //                      oled_p6x8str(1, 4, txt);   // 显示
  125   2      //                      sprintf(txt, "RIGHT_PWM = %05d", All_PWM_right);
  126   2      //                      oled_p6x8str(1, 5, txt);   // 显示
  127   2      //              }
  128   2                      
  129   2              //                      sprintf(txt,"adc_deviation= %05d",adc_deviation);
  130   2              //                      oled_p6x8str(1, 8, txt); // 显示
  131   2      
  132   2              /* 调试编码器 */
  133   2              //                      sprintf(mess,"%d,%d,%d\n",right_speed,left_speed,real_speed);                   // 编码器
  134   2      
  135   2              /* 调试速度闭环 */
  136   2              //                      sprintf(mess,"%d,%d\n",real_speed,Speed_PWM);
  137   2              //                      wireless_uart_send_buff(mess,30);                               // 右轮速度发送
  138   2      
  139   2              /* 调试IMU660 */
  140   2              //                              sprintf(mess,"%f\n",Slope_gyro);
  141   2              //                              wireless_uart_send_buff(mess,30);
  142   2      
  143   2              /* 发车 */
  144   2                      //go_motor(2000, 2000);
  145   2                      
  146   2              if (Flag.Game == 0) {
  147   3                  LightOn;
  148   3                  delay_ms(500);
  149   3                  //OutInGarage(Default_Dir, 2000);   // 出库
  150   3                  LightOff;
  151   3                  Flag.Game = 1;                                                                      // 防止再次进入
  152   3                  int_OK = 1;
  153   3                  Flag_Slope = 1  ;
  154   3                  go_flag = 1;                                                        // 执行Fuse全局控制
  155   3              }
  156   2      
  157   2              // 先不编译方便调试，需要编译时将0 -> 1
  158   2              #if 0
                       /* 停车 */
                       else if (Flag.Game == 1) {
                           STOP_Analyse();    // 停车检测 + 入库
                       }
               
                       #endif
  165   2          }
  166   1      }
  167          
  168          void Gui_TEST_Init(void){
  169   1              float *PID;
  170   1              guis[0][0].type = GUI_TYPE_SCENE_CHANGE;
  171   1              guis[0][1].type = GUI_TYPE_SCENE_CHANGE;
  172   1              guis[0][2].type = GUI_TYPE_SCENE_CHANGE;
  173   1              guis[0][3].type = GUI_TYPE_SCENE_CHANGE;
  174   1              guis[0][4].type = GUI_TYPE_EDIT_INT32_VALUE;
  175   1              strcpy(guis[0][0].names, "ADC");
  176   1              strcpy(guis[0][1].names, "SP");
  177   1              strcpy(guis[0][2].names, "PID");
  178   1              strcpy(guis[0][3].names, "RAT");
  179   1              strcpy(guis[0][4].names, "GO");
  180   1              guis[0][0].sceneGoTo = 1;
  181   1              guis[0][1].sceneGoTo = 2;
  182   1              guis[0][2].sceneGoTo = 3;
  183   1              guis[0][3].sceneGoTo = 4;
  184   1              guis[0][4].intval = &go_flag;
  185   1              guis[0][4].p1 = 1; guis[0][4].p2 = 1;
  186   1              
C251 COMPILER V5.60.0,  main                                                               01/07/24  18:51:58  PAGE 4   

  187   1              guis[1][0].type = GUI_TYPE_SCENE_CHANGE;
  188   1              guis[1][1].type = GUI_TYPE_SHOW_INT32_VALUE;
  189   1              guis[1][2].type = GUI_TYPE_SHOW_INT32_VALUE;
  190   1              guis[1][3].type = GUI_TYPE_SHOW_INT32_VALUE;
  191   1              guis[1][4].type = GUI_TYPE_SHOW_INT32_VALUE;
  192   1              guis[1][5].type = GUI_TYPE_SHOW_INT32_VALUE;
  193   1              guis[1][6].type = GUI_TYPE_SHOW_INT32_VALUE;
  194   1              guis[1][7].type = GUI_TYPE_SHOW_INT32_VALUE;
  195   1              strcpy(guis[1][0].names, "BK");
  196   1              strcpy(guis[1][1].names, "M");
  197   1              strcpy(guis[1][2].names, "L");
  198   1              strcpy(guis[1][3].names, "R");
  199   1              strcpy(guis[1][4].names, "LX");
  200   1              strcpy(guis[1][5].names, "RX");
  201   1              strcpy(guis[1][6].names, "LC");
  202   1              strcpy(guis[1][7].names, "RC");
  203   1              guis[1][0].sceneGoTo = 0;
  204   1              guis[1][1].intval = (int*)(&adc_date[6]);
  205   1              guis[1][2].intval = (int*)(&adc_date[0]);
  206   1              guis[1][3].intval = (int*)(&adc_date[1]);
  207   1              guis[1][4].intval = (int*)(&adc_date[2]);
  208   1              guis[1][5].intval = (int*)(&adc_date[3]);
  209   1              guis[1][6].intval = (int*)(&adc_date[4]);
  210   1              guis[1][7].intval = (int*)(&adc_date[5]);
  211   1              
  212   1              guis[2][0].type = GUI_TYPE_SCENE_CHANGE;
  213   1              guis[2][1].type = GUI_TYPE_SHOW_INT32_VALUE;
  214   1              guis[2][2].type = GUI_TYPE_SHOW_INT32_VALUE;
  215   1              guis[2][3].type = GUI_TYPE_SHOW_INT32_VALUE;
  216   1              guis[2][4].type = GUI_TYPE_SHOW_INT32_VALUE;
  217   1              guis[2][5].type = GUI_TYPE_SHOW_INT32_VALUE;
  218   1              strcpy(guis[2][0].names, "BK");
  219   1              strcpy(guis[2][1].names, "TOR");
  220   1              strcpy(guis[2][2].names, "TPM");
  221   1              strcpy(guis[2][3].names, "SPM");
  222   1              strcpy(guis[2][4].names, "LPM");
  223   1              strcpy(guis[2][5].names, "RPM");
  224   1              guis[2][0].sceneGoTo = 0;
  225   1              guis[2][1].intval = &adc_deviation;
  226   1              guis[2][2].intval = &Turn_PWM;
  227   1              guis[2][3].intval = &Speed_PWM;
  228   1              guis[2][4].intval = &All_PWM_left;
  229   1              guis[2][5].intval = &All_PWM_right;
  230   1              
  231   1              guis[3][0].type = GUI_TYPE_SCENE_CHANGE;
  232   1              guis[3][1].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  233   1              guis[3][2].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  234   1              guis[3][3].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  235   1              guis[3][4].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  236   1              guis[3][5].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  237   1              guis[3][6].type = GUI_TYPE_EDIT_INT32_VALUE;
  238   1              strcpy(guis[3][0].names, "BK");
  239   1              strcpy(guis[3][1].names, "KP"); //实际上不完全是kp
  240   1              strcpy(guis[3][2].names, "KP2");        //???
  241   1              strcpy(guis[3][3].names, "KI");
  242   1              strcpy(guis[3][4].names, "KD");
  243   1              strcpy(guis[3][5].names, "KT");
  244   1              strcpy(guis[3][6].names, "SP");
  245   1              guis[3][0].sceneGoTo = 0;
  246   1              guis[3][1].floatval = &vtest;
  247   1              PID = Turn_Pid[Turn_Suquence];
  248   1              guis[3][2].floatval = &(PID[KP]);
  249   1              guis[3][3].floatval = &(PID[KI]);
  250   1              guis[3][4].floatval = &(PID[KD]);
  251   1              guis[3][5].floatval = &(PID[KT]);
  252   1              guis[3][6].intval = &(ClsLoop_Speed);
C251 COMPILER V5.60.0,  main                                                               01/07/24  18:51:58  PAGE 5   

  253   1              guis[3][1].p1 = 1; guis[3][1].p2 = 1;
  254   1              guis[3][2].p1 = 1; guis[3][2].p2 = 10;
  255   1              guis[3][3].p1 = 1; guis[3][3].p2 = 10;
  256   1              guis[3][4].p1 = 10; guis[3][4].p2 = 1;
  257   1              guis[3][5].p1 = 10; guis[3][5].p2 = 1;
  258   1              guis[3][6].p1 = 100; guis[3][6].p2 = 1;
  259   1              
  260   1              guis[4][0].type = GUI_TYPE_SCENE_CHANGE;
  261   1              guis[4][1].type = GUI_TYPE_EDIT_INT32_VALUE;
  262   1              guis[4][2].type = GUI_TYPE_EDIT_INT32_VALUE;
  263   1              guis[4][3].type = GUI_TYPE_EDIT_INT32_VALUE;
  264   1              strcpy(guis[4][0].names, "BK");
  265   1              strcpy(guis[4][1].names, "Sid");
  266   1              strcpy(guis[4][2].names, "Cor");
  267   1              strcpy(guis[4][3].names, "Xie");
  268   1              guis[4][0].sceneGoTo = 0;
  269   1              guis[4][1].intval = &SideRate;
  270   1              guis[4][2].intval = &CornerRate;
  271   1              guis[4][3].intval = &XieRate;
  272   1              guis[4][1].p1 = 50; guis[4][1].p2 = 1;
  273   1              guis[4][2].p1 = 50; guis[4][2].p2 = 1;
  274   1              guis[4][3].p1 = 50; guis[4][3].p2 = 1;
  275   1              return;
  276   1      }
  277          
  278          void keyStateChange(unsigned char* FlagButtom, unsigned char ButtomPin){
  279   1              if(*FlagButtom == 0){
  280   2                      if(ButtomPin == 0){
  281   3                              delay_ms(10);
  282   3                              if(ButtomPin == 0){
  283   4                                      *FlagButtom = 1;
  284   4                              }
  285   3                      }
  286   2              }else{
  287   2                      if(ButtomPin == 1){
  288   3                              delay_ms(10);
  289   3                              if(ButtomPin == 1){
  290   4                                      *FlagButtom = 0;
  291   4                              }
  292   3                      }
  293   2              }
  294   1              return;
  295   1      }
  296          
  297          char keyPressed(unsigned char FlagButtom, unsigned char LastFlagButtom){
  298   1              return (FlagButtom == 1 && FlagButtom != LastFlagButtom);
  299   1      }
  300          
  301          void moveGuiSelection(char dir){
  302   1              if(!dir){
  303   2                      if(guiSelect == 0){
  304   3                              return;
  305   3                      }
  306   2                      guiSelect--;
  307   2                      if(guiSelect < guiTop){
  308   3                              guiTop = guiSelect;
  309   3                      }
  310   2              }else{
  311   2                      if(guiSelect == guiNumber[guiScene] - 1){
  312   3                              return;
  313   3                      }
  314   2                      guiSelect++;
  315   2                      if(guiSelect > guiTop + 6){
  316   3                              guiTop = guiSelect - 6;
  317   3                      }
  318   2              }
C251 COMPILER V5.60.0,  main                                                               01/07/24  18:51:58  PAGE 6   

  319   1              return;
  320   1      }
  321          
  322          void KeySystem(void){
  323   1              int i = 0;
  324   1              char txt[20];
  325   1              keyStateChange(&FlagEnter, (BUTTOM_ENTER == 0) ? 0 : 1);
  326   1              keyStateChange(&FlagCancel, (BUTTOM_CANCEL == 0) ? 0 : 1);
  327   1              keyStateChange(&FlagUp, (BUTTOM_UP == 0) ? 0 : 1);
  328   1              keyStateChange(&FlagDown, (BUTTOM_DOWN == 0) ? 0 : 1);
  329   1              /*if(FlagEnter == 1 && FlagEnter != LastFlagEnter){
  330   1                      oled_fill(0x00);
  331   1                      showing = !showing;
  332   1              }*/
  333   1              if(!guiEdit){
  334   2                      if(keyPressed(FlagUp, LastFlagUp)){
  335   3                              oled_fill(0x00);
  336   3                              moveGuiSelection(0);
  337   3                      }else
  338   2                      if(keyPressed(FlagDown, LastFlagDown)){
  339   3                              oled_fill(0x00);
  340   3                              moveGuiSelection(1);
  341   3                      }
  342   2              }
  343   1              for(i = guiTop; i < guiNumber[guiScene], i < guiTop + 7; i++){
  344   2                      if(guiSelect == i){
  345   3                              if(guis[guiScene][i].type == GUI_TYPE_SCENE_CHANGE){
  346   4                                      if(keyPressed(FlagEnter, LastFlagEnter)){
  347   5                                              oled_fill(0x00);
  348   5                                              guiScene = guis[guiScene][i].sceneGoTo;
  349   5                                              guiTop = 0;
  350   5                                              guiSelect = 0;
  351   5                                      }
  352   4                                      sprintf(txt, "*%s", guis[guiScene][i].names);
  353   4                              }else
  354   3                              if(guis[guiScene][i].type == GUI_TYPE_SHOW_FLOAT_VALUE){
  355   4                                      sprintf(txt, "*%-8s %.2f ", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  356   4                              }else
  357   3                              if(guis[guiScene][i].type == GUI_TYPE_SHOW_INT32_VALUE){
  358   4                                      sprintf(txt, "*%-8s %05d ", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  359   4                              }else
  360   3                              if(guis[guiScene][i].type == GUI_TYPE_EDIT_FLOAT_VALUE){
  361   4                                      if(guiEdit == 0){
  362   5                                              if(keyPressed(FlagEnter, LastFlagEnter)){
  363   6                                                      oled_fill(0x00);
  364   6                                                      guiEdit = 1;
  365   6                                              }
  366   5                                              sprintf(txt, "*%-8s %.2f ", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  367   5                                      }else{
  368   5                                              if(keyPressed(FlagEnter, LastFlagEnter)){
  369   6                                                      oled_fill(0x00);
  370   6                                                      guiEdit = 0;
  371   6                                                      saveConfig();
  372   6                                              }else
  373   5                                              if(keyPressed(FlagUp, LastFlagUp)){
  374   6                                                      oled_fill(0x00);
  375   6                                                      *(guis[guiScene][i].floatval) -= (float)guis[guiScene][i].p1 / (float)guis[guiScene][i].p2;
  376   6                                              }else
  377   5                                              if(keyPressed(FlagDown, LastFlagDown)){
  378   6                                                      oled_fill(0x00);
  379   6                                                      *(guis[guiScene][i].floatval) += (float)guis[guiScene][i].p1 / (float)guis[guiScene][i].p2;
  380   6                                              }
  381   5                                              sprintf(txt, "*%-8s<%.2f>", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  382   5                                      }
  383   4                              }else
  384   3                              if(guis[guiScene][i].type == GUI_TYPE_EDIT_INT32_VALUE){
C251 COMPILER V5.60.0,  main                                                               01/07/24  18:51:58  PAGE 7   

  385   4                                      if(guiEdit == 0){
  386   5                                              if(keyPressed(FlagEnter, LastFlagEnter)){
  387   6                                                      oled_fill(0x00);
  388   6                                                      guiEdit = 1;
  389   6                                              }
  390   5                                              sprintf(txt, "*%-8s %05d ", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  391   5                                      }else{
  392   5                                              if(keyPressed(FlagEnter, LastFlagEnter)){
  393   6                                                      oled_fill(0x00);
  394   6                                                      guiEdit = 0;
  395   6                                                      saveConfig();
  396   6                                              }else
  397   5                                              if(keyPressed(FlagUp, LastFlagUp)){
  398   6                                                      oled_fill(0x00);
  399   6                                                      *(guis[guiScene][i].intval) -= (float)guis[guiScene][i].p1 / (float)guis[guiScene][i].p2;
  400   6                                              }else
  401   5                                              if(keyPressed(FlagDown, LastFlagDown)){
  402   6                                                      oled_fill(0x00);
  403   6                                                      *(guis[guiScene][i].intval) += (float)guis[guiScene][i].p1 / (float)guis[guiScene][i].p2;
  404   6                                              }
  405   5                                              sprintf(txt, "*%-8s<%05d>", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  406   5                                      }
  407   4                              }
  408   3                              oled_p6x8str(1, (uint8)(i - guiTop + 1), txt);
  409   3                      }else{
  410   3                              if(guis[guiScene][i].type == GUI_TYPE_SCENE_CHANGE){
  411   4                                      sprintf(txt, " %-s", guis[guiScene][i].names);
  412   4                              }else
  413   3                              if(guis[guiScene][i].type == GUI_TYPE_SHOW_FLOAT_VALUE){
  414   4                                      sprintf(txt, " %-8s %.2f ", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  415   4                              }else
  416   3                              if(guis[guiScene][i].type == GUI_TYPE_SHOW_INT32_VALUE){
  417   4                                      sprintf(txt, " %-8s %05d ", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  418   4                              }else
  419   3                              if(guis[guiScene][i].type == GUI_TYPE_EDIT_FLOAT_VALUE){
  420   4                                      if(guiEdit == 0){
  421   5                                              sprintf(txt, " %-8s %.2f ", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  422   5                                      }else{
  423   5                                              sprintf(txt, " %-8s<%.2f>", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  424   5                                      }
  425   4                              }else
  426   3                              if(guis[guiScene][i].type == GUI_TYPE_EDIT_INT32_VALUE){
  427   4                                      if(guiEdit == 0){
  428   5                                              sprintf(txt, " %-8s %05d ", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  429   5                                      }else{
  430   5                                              sprintf(txt, " %-8s<%05d>", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  431   5                                      }
  432   4                              }
  433   3                              oled_p6x8str(1, (uint8)(i - guiTop + 1), txt);
  434   3                      }
  435   2              }
  436   1              /*At24c02_Write_float(0x04, a++);
  437   1              a = At24c02_Read_float(0x04);
  438   1              sprintf(txt, "%.1f", a);
  439   1              oled_p6x8str(1, 7, txt);*/
  440   1              LastFlagEnter = FlagEnter;
  441   1              LastFlagCancel = FlagCancel;
  442   1              LastFlagUp = FlagUp;
  443   1              LastFlagDown = FlagDown;
  444   1      }
  445          
  446          
  447          


Module Information          Static   Overlayable
------------------------------------------------
C251 COMPILER V5.60.0,  main                                                               01/07/24  18:51:58  PAGE 8   

  code size            =      4232     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       655     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       279     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
